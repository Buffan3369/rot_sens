COUNTS = c(
length(which(sds[, t/10] < 5)),
length(which((sds[, t/10] < 10) & (sds[, t/10] >= 5))), #translating these categories in terms of logical condition
length(which((sds[, t/10] < 20) & (sds[, t/10] >= 10))),
length(which((sds[, t/10] < 30) & (sds[, t/10] >= 20))),
length(which(sds[, t/10] >= 30))
)
))
}
#raw counts
barplt <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category") +
geom_vline(xintercept = 200, col = "red", linetype = "dashed") +
geom_vline(xintercept = 410, col = "red", linetype = "dashed")
print(barplt)
#raw counts
barplt <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = rev(c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529'))) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category") +
geom_vline(xintercept = 200, col = "red", linetype = "dashed") +
geom_vline(xintercept = 410, col = "red", linetype = "dashed")
print(barplt)
final_df <- data.frame(TIME = rep(x = 0, 5),
CAT = c("A: 0-5°", "B: 5-10°", "C: 10-20°", "D: 20-30°", "E: >30°"),
COUNTS = c(29500, 0, 0, 0, 0))
for(t in seq(from = 10, to = 540, by = 10)){
final_df <- rbind(final_df,
data.frame(TIME = rep(x = t, 5),
CAT = c("A: 0-5°", "B: 5-10°", "C: 10-20°", "D: 20-30°", "E: >30°"),  #the five categories we're considering
COUNTS = c(
length(which(sds[, t/10] < 5)),
length(which((sds[, t/10] < 10) & (sds[, t/10] >= 5))), #translating these categories in terms of logical condition
length(which((sds[, t/10] < 20) & (sds[, t/10] >= 10))),
length(which((sds[, t/10] < 30) & (sds[, t/10] >= 20))),
length(which(sds[, t/10] >= 30))
)
))
}
#raw counts
barplt <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category") +
geom_vline(xintercept = 200, col = "red", linetype = "dashed") +
geom_vline(xintercept = 410, col = "red", linetype = "dashed")
print(barplt)
ggsave(filename = "./figures/barplots/barplot_counts.pdf", plot = barplt) #save as pdf
ggsave(filename = "./figures/barplots/barplot_counts.png", plot = barplt) #and png
par(mfrow(1,3))
time_int <- list(c(0, 200),
c(210, 410),
c(420, 540))
for(t in time_int){
ggplot(data = final_df[which(final_df$TIME %in% seq(from = t[[1]], to = t[[2]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category")
}
t = time_int[1]
ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category") +
geom_vline(xintercept = 200, col = "red", linetype = "dashed") +
geom_vline(xintercept = 410, col = "red", linetype = "dashed")
t = time_int[1]
ggplot(data = final_df[which(final_df$TIME %in% seq(from = t[[1]], to = t[[2]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category")
t = time_int[1]
t
t[[1]]
t[1,1]
t
length(t)
time_int <- c(list(0, 200),
list(210, 410),
list(420, 540))
t = time_int[1]
t
t = time_int[1][1]
t
t = time_int[1][2]
t
time_int <- list(list(0, 200),
list(210, 410),
list(420, 540))
t = time_int[1]
t
t = time_int[1][[1]]
t
t = time_int[1]
t[[1]]
t[[2]]
str(t)
t$$1
t$
1
t = time_int[1][[2]]
par(mfrow(1,3))
par(mfrow = (1,3))
par(mfrow = c(1,3))
l_bound <- c(0, 210, 420)
u_bound <- c(200, 410, 540)
for(i in 1:3){
ggplot(data = final_df[which(final_df$TIME %in% seq(from = l_bound[[i]], to = u_bound[[i]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category")
}
i = 1
ggplot(data = final_df[which(final_df$TIME %in% seq(from = l_bound[[i]], to = u_bound[[i]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category")
i = 1
p1 <- ggplot(data = final_df[which(final_df$TIME %in% seq(from = l_bound[[i]], to = u_bound[[i]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category")
i = 2
p2 <- ggplot(data = final_df[which(final_df$TIME %in% seq(from = l_bound[[i]], to = u_bound[[i]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category")
i = 3
p3 <- ggplot(data = final_df[which(final_df$TIME %in% seq(from = l_bound[[i]], to = u_bound[[i]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category")
ggarrange(p1, p2, p3)
grid.arrange(p1, p2, p3)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(gridExtra)
## Import model's polygons as shapefiles and proceed to the georeferencing ----------------------------
source("./scripts/data_analysis/georeferencing_and_NA_pos.R") #georeferencing
source("./scripts/data_analysis/cells_to_drop.R") #spatial scaling of the ourputs of the models
## Read sd results and get rid of longitude (odd indexes) ------------------------------------
sds <- readRDS("./data/standard_deviation_4mdls_nothresh.RDS")
sds <- sds[-MAX, -c(1:2, which(seq(from = 3, to = ncol(sds)+1, by = 1) %%2 != 0))] #MAX comes from the "cell_to_drop.R" script
final_df <- data.frame(TIME = rep(x = 0, 5),
CAT = c("A: 0-5°", "B: 5-10°", "C: 10-20°", "D: 20-30°", "E: >30°"),
COUNTS = c(29500, 0, 0, 0, 0))
for(t in seq(from = 10, to = 540, by = 10)){
final_df <- rbind(final_df,
data.frame(TIME = rep(x = t, 5),
CAT = c("A: 0-5°", "B: 5-10°", "C: 10-20°", "D: 20-30°", "E: >30°"),  #the five categories we're considering
COUNTS = c(
length(which(sds[, t/10] < 5)),
length(which((sds[, t/10] < 10) & (sds[, t/10] >= 5))), #translating these categories in terms of logical condition
length(which((sds[, t/10] < 20) & (sds[, t/10] >= 10))),
length(which((sds[, t/10] < 30) & (sds[, t/10] >= 20))),
length(which(sds[, t/10] >= 30))
)
))
}
par(mfrow = c(1,3))
l_bound <- c(0, 210, 420)
u_bound <- c(200, 410, 540)
dev.off()
l_bound <- c(0, 210, 420)
u_bound <- c(200, 410, 540)
i = 1
p1 <- ggplot(data = final_df[which(final_df$TIME %in% seq(from = l_bound[[i]], to = u_bound[[i]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category")
i = 2
p2 <- ggplot(data = final_df[which(final_df$TIME %in% seq(from = l_bound[[i]], to = u_bound[[i]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category")
i = 3
p3 <- ggplot(data = final_df[which(final_df$TIME %in% seq(from = l_bound[[i]], to = u_bound[[i]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category")
grid.arrange(p1, p2, p3)
i = 3
p3 <- ggplot(data = final_df[which(final_df$TIME %in% seq(from = l_bound[[i]], to = u_bound[[i]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity",
show.legend = F) +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts")
grid.arrange(p1, p2, p3)
?grid.arrange
i = 1
p1 <- ggplot(data = final_df[which(final_df$TIME %in% seq(from = l_bound[[i]], to = u_bound[[i]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category")
i = 2
p2 <- ggplot(data = final_df[which(final_df$TIME %in% seq(from = l_bound[[i]], to = u_bound[[i]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity",
show.legend = F) +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category")
i = 3
p3 <- ggplot(data = final_df[which(final_df$TIME %in% seq(from = l_bound[[i]], to = u_bound[[i]], by = 10)),],
aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity",
show.legend = F) +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts")
grid.arrange(p3, p2, p1, nrow = 1)
## import our friend ggplot ------------------------------------------------------------------
library(ggplot2)
## Read sd results and get rid of longitude (odd indexes) ------------------------------------
sds <- readRDS("./data/standard_deviation_4mdls_nothresh.RDS")
sds <- sds[-MAX, -c(1:2, which(seq(from = 3, to = ncol(sds)+1, by = 1) %%2 != 0))] #MAX comes from the "cell_to_drop.R" script
final_df <- data.frame(TIME = rep(x = 0, 5),
CAT = c("A: 0-5°", "B: 5-10°", "C: 10-20°", "D: 20-30°", "E: >30°"),
COUNTS = c(29500, 0, 0, 0, 0))
for(t in seq(from = 10, to = 540, by = 10)){
final_df <- rbind(final_df,
data.frame(TIME = rep(x = t, 5),
CAT = c("A: 0-5°", "B: 5-10°", "C: 10-20°", "D: 20-30°", "E: >30°"),  #the five categories we're considering
COUNTS = c(
length(which(sds[, t/10] < 5)),
length(which((sds[, t/10] < 10) & (sds[, t/10] >= 5))), #translating these categories in terms of logical condition
length(which((sds[, t/10] < 20) & (sds[, t/10] >= 10))),
length(which((sds[, t/10] < 30) & (sds[, t/10] >= 20))),
length(which(sds[, t/10] >= 30))
)
))
}
#raw counts
barplt <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_manual(values = c('#f7fcb9','#addd8e','#41ab5d','#006837','#004529')) +
# scale_fill_viridis(discrete = T) +
scale_x_reverse() +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
panel.grid.major = element_blank(), # Remove panel grid lines
panel.grid.minor = element_blank(),
panel.background = element_blank(), # Remove panel background
panel.border = element_rect(colour = "black", fill = NA, size = 1) #frame the plot
) +
labs(x = "Time (Ma)", y = "Counts", fill = "Category") +
geom_vline(xintercept = 200, col = "red", linetype = "dashed") +
geom_vline(xintercept = 410, col = "red", linetype = "dashed")
print(barplt)
