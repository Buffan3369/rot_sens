axis.text.x = element_text(size = 23),
axis.text.y = element_text(size = 23)) +
labs(x = "Time (x10Myr BP)", y = "Counts") +
geom_vline(xintercept = 200, col = "black") +
geom_vline(xintercept = 410, col = "black")
barplt #some time intervals seem to have disappearing cells that reappear aftewards. Let's do the same plot but with proportions
#raw counts
barplt <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(text = element_text(size = 25),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
axis.text.x = element_text(size = 23),
axis.text.y = element_text(size = 23)) +
labs(x = "Time (x10Myr BP)", y = "Counts") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
barplt #some time intervals seem to have disappearing cells that reappear aftewards. Let's do the same plot but with proportions
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(text = element_text(size = 25),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
axis.text.x = element_text(size = 23),
axis.text.y = element_text(size = 23)) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
?labs
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(text = element_text(size = 25),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
axis.text.x = element_text(size = 23),
axis.text.y = element_text(size = 23)) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(axis.text.x = element_text(size = 23),
axis.text.y = element_text(size = 23)) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(xlab = element_text(size = 25),
ylab = element_text(size = 25),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
axis.text.x = element_text(size = 23),
axis.text.y = element_text(size = 23)) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(axis.title = element_text(size = 25),
legend.text = element_text(size = 20),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
axis.text.x = element_text(size = 23),
axis.text.y = element_text(size = 23)) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(axis.title = element_text(size = 25),
legend.title = element.text(size = 20),
legend.text = element_text(size = 15),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
axis.text.x = element_text(size = 23),
axis.text.y = element_text(size = 23)) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(axis.title = element_text(size = 25),
legend.title = element.text(size = 20),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
axis.text.x = element_text(size = 23),
axis.text.y = element_text(size = 23)) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(legend.title = element.text(size = 20),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
axis.text.x = element_text(size = 23),
axis.text.y = element_text(size = 23)) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
dev.off()
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(legend.title = element.text(size = 20),
legend.text = element.text(size = 15),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(legend.title = element.text(size = 20),
legend.text = element_text(size = 15),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
## Import model's polygons as shapefiles and proceed to the georeferencing ----------------------------
source("./scripts/data_analysis/georeferencing_and_NA_pos.R") #georeferencing
source("./scripts/data_analysis/cells_to_drop.R") #spatial scaling of the ourputs of the models
## import our friend ggplot ------------------------------------------------------------------
library(ggplot2)
library(viridis)
## Read sd results and get rid of longitude (odd indexes) ------------------------------------
sds <- readRDS("./data/standard_deviation_4mdls.RDS")
sds <- sds[-MAX, -c(1:2, which(seq(from = 3, to = ncol(sds)+1, by = 1) %%2 != 0))] #MAX comes from the "cell_to_drop.R" script
final_df <- data.frame(TIME = rep(x = 0, 5),
CAT = c("A: 0-5°", "B: 5-10°", "C: 10-20°", "D: 20-30°", "E: >30°"),
COUNTS = c(29500, 0, 0, 0, 0))
for(t in seq(from = 50, to = 500, by = 50)){
final_df <- rbind(final_df,
data.frame(TIME = rep(x = -t, 5),
CAT = c("A: 0-5°", "B: 5-10°", "C: 10-20°", "D: 20-30°", "E: >30°"),  #the five categories we're considering
COUNTS = c(
length(which(sds[, t/10] < 5)),
length(which((sds[, t/10] < 10) & (sds[, t/10] >= 5))), #translating these categories in terms of logical condition
length(which((sds[, t/10] < 20) & (sds[, t/10] >= 10))),
length(which((sds[, t/10] < 30) & (sds[, t/10] >= 20))),
length(which(sds[, t/10] >= 30))
)
))
}
#raw counts
barplt <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(text = element_text(size = 25),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
axis.text.x = element_text(size = 23),
axis.text.y = element_text(size = 23)) +
labs(x = "Time (x10Myr BP)", y = "Counts") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
## Import model's polygons as shapefiles and proceed to the georeferencing ----------------------------
source("./scripts/data_analysis/georeferencing_and_NA_pos.R") #georeferencing
source("./scripts/data_analysis/cells_to_drop.R") #spatial scaling of the ourputs of the models
## import our friend ggplot ------------------------------------------------------------------
library(ggplot2)
library(viridis)
## Read sd results and get rid of longitude (odd indexes) ------------------------------------
sds <- readRDS("./data/standard_deviation_4mdls.RDS")
sds <- sds[-MAX, -c(1:2, which(seq(from = 3, to = ncol(sds)+1, by = 1) %%2 != 0))] #MAX comes from the "cell_to_drop.R" script
final_df <- data.frame(TIME = rep(x = 0, 5),
CAT = c("A: 0-5°", "B: 5-10°", "C: 10-20°", "D: 20-30°", "E: >30°"),
COUNTS = c(29500, 0, 0, 0, 0))
for(t in seq(from = 50, to = 500, by = 50)){
final_df <- rbind(final_df,
data.frame(TIME = rep(x = -t, 5),
CAT = c("A: 0-5°", "B: 5-10°", "C: 10-20°", "D: 20-30°", "E: >30°"),  #the five categories we're considering
COUNTS = c(
length(which(sds[, t/10] < 5)),
length(which((sds[, t/10] < 10) & (sds[, t/10] >= 5))), #translating these categories in terms of logical condition
length(which((sds[, t/10] < 20) & (sds[, t/10] >= 10))),
length(which((sds[, t/10] < 30) & (sds[, t/10] >= 20))),
length(which(sds[, t/10] >= 30))
)
))
}
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(legend.title = element.text(size = 20),
legend.text = element_text(size = 15),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(legend.title = element_text(size = 20),
legend.text = element_text(size = 13),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 15)
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 15),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#raw counts
barplt <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Counts", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
barplt #some time intervals seem to have disappearing cells that reappear aftewards. Let's do the same plot but with proportions
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
#raw counts
barplt <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "stack", #display counts
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Counts", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
barplt #some time intervals seem to have disappearing cells that reappear aftewards. Let's do the same plot but with proportions
#proportions
bplt_prop <- ggplot(data = final_df, aes(fill = CAT, x = TIME, y = COUNTS)) +
geom_bar(position = "fill", #display proportions
stat = "identity") +
scale_fill_viridis(discrete = T) +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"),
axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
) +
labs(x = "Time (x10Myr BP)", y = "Cell proportion", fill = "Category") +
geom_vline(xintercept = -200, col = "black") +
geom_vline(xintercept = -410, col = "black")
bplt_prop
ggsave(filename = "./data/barplots/barplot_counts.pdf", plot = barplt)
ggsave(filename = "./figures/barplots/barplot_prop.pdf", plot = bplt_prop)
ggsave(filename = "./figures/barplots/barplot_counts.png", plot = barplt)
ggsave(filename = "./figures/barplots/barplot_prop.png", plot = bplt_prop)
library(raster) #just in case, although may have been loaded before
## File built in the "ID_weight.R" script ------------------------------------------------------------------------
store <- readRDS("./data/data_pts_plate_IDs_according_to_the_four_models.RDS")
## Rasterizing ---------------------------------------------------------------------------------------------------
r <- rasterFromXYZ(store[,c(1,2,6)], crs = "+proj=longlat +datum=WGS84")
proj_moll <- "+proj=moll +lon_0=0 +x_0=0 +y_0=0"  #mollweide
p <- projectRaster(r, crs = proj_moll)
## set the background map -------------------------------------------------------------
source("./scripts/visualisation/background_map.R") #nb: ignore warnings
pdf("C:/Users/lucas/OneDrive/Bureau/Internship_2022/figures/PlateID_discrepancies.pdf", height = 7, width = 10)
plot.new()
par(bg = 'white')
plot(p, col = c('grey', 'yellow', 'red'),  axes = FALSE)
plot(worldline_mol,
add = TRUE) #backround map designed in "background_map.R"
dev.off()
dev.off()
pal <- c('#fde0dd','#fcc5c0','#fa9fb5','#f768a1','#dd3497','#ae017e','#7a0177','#49006a')
df <- readRDS("./data/MST_length.RDS")
k = 22
true_time <- (k-2)*10 #for the plot title
xyz <- df[, c(1,2,k)] #select the corresponding latitude deviation
r <- rasterFromXYZ(xyz,
crs = "+proj=longlat +datum=WGS84")  #write the raster file with the UTM projection coord sys
proj_moll <- "+proj=moll +lon_0=0 +x_0=0 +y_0=0"  #mollweide projection
p <- projectRaster(r, crs = proj_moll)
pdf(file = "C:/Users/lucas/OneDrive/Bureau/Internship_2022/figures/MST.pdf", height = 7, width = 10, onefile = FALSE)
plot.new()
#
# rect(par("usr")[1], par("usr")[3],
#      par("usr")[2], par("usr")[4],
#      col = "grey92") #set light grey background
# par(new = TRUE)
par(bg = "grey92")
plot(p,
axes = FALSE,
col = pal,
main = paste0("MST length between the 4 models ", "(", true_time ,"Ma)"),
legend.args = list(text = 'MST length (x10^3 km)', side = 4, font = 2, line = 2.5, cex = 0.8),
zlim = c(0,17))  #display the output
plot(worldline_mol,
add = TRUE,
col = adjustcolor("grey30",alpha.f=0.5))
dev.off()
pdf("C:/Users/lucas/OneDrive/Bureau/Internship_2022/figures/ID_weight.pdf", height = 7, width = 10, onefile = FALSE)
plot.new()
par(bg = 'white')
plot(p, col = c('grey', 'yellow', 'red'),  axes = FALSE)
plot(worldline_mol,
add = TRUE) #backround map designed in "background_map.R"
dev.off()
## File built in the "ID_weight.R" script ------------------------------------------------------------------------
store <- readRDS("./data/data_pts_plate_IDs_according_to_the_four_models.RDS")
## Rasterizing ---------------------------------------------------------------------------------------------------
r <- rasterFromXYZ(store[,c(1,2,6)], crs = "+proj=longlat +datum=WGS84")
proj_moll <- "+proj=moll +lon_0=0 +x_0=0 +y_0=0"  #mollweide
p <- projectRaster(r, crs = proj_moll)
pdf("C:/Users/lucas/OneDrive/Bureau/Internship_2022/figures/ID_weight.pdf", height = 7, width = 10, onefile = FALSE)
plot.new()
par(bg = 'grey92')
plot(p, col = c('grey', 'yellow', 'red'),  axes = FALSE)
plot(worldline_mol,
add = TRUE) #backround map designed in "background_map.R"
dev.off()
?raster::plot
pdf("C:/Users/lucas/OneDrive/Bureau/Internship_2022/figures/ID_weight.pdf", height = 7, width = 10, onefile = FALSE)
plot.new()
par(bg = 'grey92')
plot(p, col = c('grey', 'yellow', 'red'),
axes = FALSE,
legend.args = list(text = 'ID_weight', side = 4, font = 2, line = 2.5, cex = 0.8),
breaks = c(1,2,3))
plot(worldline_mol,
add = TRUE) #backround map designed in "background_map.R"
dev.off()
plot.new()
par(bg = 'grey92')
plot(p, col = c('grey', 'yellow', 'red'),
axes = FALSE,
legend.args = list(text = 'ID_weight', side = 4, font = 2, line = 2.5, cex = 0.8),
breaks = c(1,2,3,4))
plot(worldline_mol,
add = TRUE) #backround map designed in "background_map.R"
plot.new()
par(bg = 'grey92')
plot(p, col = c('grey', 'yellow', 'red'),
axes = FALSE,
legend.args = list(text = 'ID_weight', side = 4, font = 2, line = 2.5, cex = 0.8),
breaks = c(1,1.5,2,2.5,3))
plot(worldline_mol,
add = TRUE) #backround map designed in "background_map.R"
plot.new()
par(bg = 'grey92')
plot(p, col = c('grey', 'yellow', 'red'),
axes = FALSE,
legend.args = list(text = 'ID_weight', side = 4, font = 2, line = 2.5, cex = 0.8))
plot(worldline_mol,
add = TRUE) #backround map designed in "background_map.R"
pdf("C:/Users/lucas/OneDrive/Bureau/Internship_2022/figures/ID_weight.pdf", height = 7, width = 10, onefile = FALSE)
plot.new()
pdf("C:/Users/lucas/OneDrive/Bureau/Internship_2022/figures/ID_weight.pdf", height = 7, width = 10, onefile = FALSE)
plot.new()
par(bg = 'grey92')
plot(p, col = c('grey', 'yellow', 'red'),
axes = FALSE,
legend.args = list(text = 'ID_weight', side = 4, font = 2, line = 2.5, cex = 0.8))
plot(worldline_mol,
add = TRUE) #backround map designed in "background_map.R"
dev.off()
dev.off()
